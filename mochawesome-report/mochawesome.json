{
  "stats": {
    "suites": 3,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2023-10-12T06:23:47.797Z",
    "end": "2023-10-12T06:24:01.600Z",
    "duration": 13803,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9be86ebb-f092-4fc3-8b5b-f0f260914638",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f33ae6fd-9ca0-43fc-8a0d-6d68742e933c",
          "title": "Account tests",
          "fullFile": "C:\\Users\\Krkljes\\Desktop\\Realworld App Praksa\\Realworld_app_praksa\\tests\\account.test.js",
          "file": "\\tests\\account.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Account tests\"",
              "fullTitle": "Account tests \"before each\" hook in \"Account tests\"",
              "timedOut": false,
              "duration": 1160,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Initialize the WebDriver and open the browser\ndriver = await new Builder().forBrowser('chrome').build();",
              "err": {},
              "uuid": "4d86722e-e3cb-4318-8f3b-2a06b491046d",
              "parentUUID": "f33ae6fd-9ca0-43fc-8a0d-6d68742e933c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Account tests\"",
              "fullTitle": "Account tests \"after each\" hook in \"Account tests\"",
              "timedOut": false,
              "duration": 29,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Quit the WebDriver after the test is complete\nawait driver.quit();",
              "err": {},
              "uuid": "36e39c50-6646-42f7-bb12-e83b567292cd",
              "parentUUID": "f33ae6fd-9ca0-43fc-8a0d-6d68742e933c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Create account test",
              "fullTitle": "Account tests Create account test",
              "timedOut": false,
              "duration": 1720,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  \"Found the url http://localhost:3000/signin\",\n  \"Filled the username Tavares_Barrows\",\n  \"Filled the password s3cret\",\n  \"Clicked on the button By(css selector, [data-test='signin-submit'])\",\n  \"The url matched http://localhost:3000/\",\n  \"Clicked on the button By(css selector, [data-test='sidenav-bankaccounts'])\",\n  \"Clicked on the button By(css selector, [data-test='bankaccount-new'])\",\n  \"Created a dynamic bank name\",\n  \"Created a routing number 123456789\",\n  \"Created an account number 123456789\",\n  \"Clicked on the button By(css selector, [data-test='bankaccount-submit'])\"\n]",
              "code": "const loginPage = new LoginPage(driver);\nconst accountPage = new AccountPage(driver);\n// Perform login\nawait loginPage.performLogin();\n// Create account\nawait accountPage.createBankAccount();\n// Add assertions to verify successful account creation\nconst currentUrl = await driver.getCurrentUrl();\nexpect(currentUrl).to.equal(accountPage.accountsUrl, \"Account creation failed\");\n//Additional context\naddContext(this, `Found the url ${loginPage.loginUrl}`);\naddContext(this, `Filled the username ${loginPage.username}`);\naddContext(this, `Filled the password ${loginPage.password}`);\naddContext(this, `Clicked on the button ${loginPage.loginButton}`);\naddContext(this, `The url matched ${loginPage.baseUrl}`);\naddContext(this, `Clicked on the button ${accountPage.accountBtn}`);\naddContext(this, `Clicked on the button ${accountPage.createAccBtn}`);\naddContext(this, `Created a dynamic bank name`);\naddContext(this, `Created a routing number ${accountPage.account.routingNumber}`);\naddContext(this, `Created an account number ${accountPage.account.accountNumber}`);\naddContext(this, `Clicked on the button ${accountPage.saveAccBtn}`);",
              "err": {},
              "uuid": "5d9eed5f-0ebc-4c31-8fe9-111893dce9f2",
              "parentUUID": "f33ae6fd-9ca0-43fc-8a0d-6d68742e933c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete account test",
              "fullTitle": "Account tests Delete account test",
              "timedOut": false,
              "duration": 1335,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  \"Found the url http://localhost:3000/signin\",\n  \"Filled the username Tavares_Barrows\",\n  \"Filled the password s3cret\",\n  \"Clicked on the button By(css selector, [data-test='signin-submit'])\",\n  \"The url matched http://localhost:3000/\",\n  \"Clicked on the button By(css selector, [data-test='sidenav-bankaccounts'])\",\n  \"Clicked on the button By(css selector, [data-test='bankaccount-new'])\",\n  \"Found the field that matches the account name Kshlerin - Ledner Bank\",\n  \"Located the delete button that matches the account name field By(css selector, [data-test='bankaccount-delete'])\",\n  \"Clicked on the button By(css selector, [data-test='bankaccount-delete'])\"\n]",
              "code": "const loginPage = new LoginPage(driver);\nconst accountPage = new AccountPage(driver);\n// Perform login\nawait loginPage.performLogin();\n// Delete account\nawait accountPage.findAndClickDeleteButtonByText();\n// Add assertions to verify successful deletion\nexpect(accountPage.verifyText).to.satisfy((text) => {\n  return text.includes(\"(Deleted)\") || text.includes(\"DELETE\");\n}, 'Associated text does not meet the expected conditions.');\n//Additional context\naddContext(this, `Found the url ${loginPage.loginUrl}`);\naddContext(this, `Filled the username ${loginPage.username}`);\naddContext(this, `Filled the password ${loginPage.password}`);\naddContext(this, `Clicked on the button ${loginPage.loginButton}`);\naddContext(this, `The url matched ${loginPage.baseUrl}`);\naddContext(this, `Clicked on the button ${accountPage.accountBtn}`);\naddContext(this, `Clicked on the button ${accountPage.createAccBtn}`);\naddContext(this, `Found the field that matches the account name ${accountPage.accountName}`);\naddContext(this, `Located the delete button that matches the account name field ${accountPage.delAccBtn}`);\naddContext(this, `Clicked on the button ${accountPage.delAccBtn}`);",
              "err": {},
              "uuid": "f037fd01-8218-49c3-9614-7b99478c3930",
              "parentUUID": "f33ae6fd-9ca0-43fc-8a0d-6d68742e933c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5d9eed5f-0ebc-4c31-8fe9-111893dce9f2",
            "f037fd01-8218-49c3-9614-7b99478c3930"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3055,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "697ca0f1-34d0-40b5-9193-164102381ec5",
          "title": "Login Tests",
          "fullFile": "C:\\Users\\Krkljes\\Desktop\\Realworld App Praksa\\Realworld_app_praksa\\tests\\login.test.js",
          "file": "\\tests\\login.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Login Tests\"",
              "fullTitle": "Login Tests \"before each\" hook in \"Login Tests\"",
              "timedOut": false,
              "duration": 1184,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Initialize the WebDriver and open the browser\ndriver = await new Builder().forBrowser('chrome').build();",
              "err": {},
              "uuid": "2af3ba36-a5e9-4305-8035-06b93d92ac19",
              "parentUUID": "697ca0f1-34d0-40b5-9193-164102381ec5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Login Tests\"",
              "fullTitle": "Login Tests \"after each\" hook in \"Login Tests\"",
              "timedOut": false,
              "duration": 31,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Quit the WebDriver after the test is complete\nawait driver.quit();",
              "err": {},
              "uuid": "37c0268e-d6cb-47cb-b947-f4055abb5c07",
              "parentUUID": "697ca0f1-34d0-40b5-9193-164102381ec5",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Valid login test",
              "fullTitle": "Login Tests Valid login test",
              "timedOut": false,
              "duration": 1208,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  \"Found the url http://localhost:3000/signin\",\n  \"Filled the username Tavares_Barrows\",\n  \"Filled the password s3cret\",\n  \"Clicked on the button By(css selector, [data-test='signin-submit'])\",\n  \"The url matched http://localhost:3000/\"\n]",
              "code": "const loginPage = new LoginPage(driver);\n// Perform login\nawait loginPage.performLogin();\n// Add assertions to verify successful login\nconst currentUrl = await driver.getCurrentUrl();\n\nexpect(currentUrl).to.equal(loginPage.baseUrl, \"Log in was not successful\");\n//Additional context\naddContext(this, `Found the url ${loginPage.loginUrl}`);\naddContext(this, `Filled the username ${loginPage.username}`);\naddContext(this, `Filled the password ${loginPage.password}`);\naddContext(this, `Clicked on the button ${loginPage.loginButton}`);\naddContext(this, `The url matched ${loginPage.baseUrl}`);",
              "err": {},
              "uuid": "3ab080b3-0a42-4ec6-b9ef-aaa0eb59262e",
              "parentUUID": "697ca0f1-34d0-40b5-9193-164102381ec5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Invalid login test",
              "fullTitle": "Login Tests Invalid login test",
              "timedOut": false,
              "duration": 1208,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  \"Found the url http://localhost:3000/signin\",\n  \"Filled the username Tavares_Not_Barrows\",\n  \"Filled the password notsecret\",\n  \"Clicked on the button By(css selector, [data-test='signin-submit'])\",\n  \"Received error message Username or password is invalid\"\n]",
              "code": "const loginPage = new LoginPage(driver);\n// Try to login with invalid credentials\nawait loginPage.tryInvalidLogin();\n// Add assertions to verify the login failed\nconst errorMessage = driver.wait(until.elementLocated(loginPage.errorField),2000);\nconst errorText = await errorMessage.getText();\nexpect(errorText).to.equal(loginPage.errorMsg, \"Invalid login test failed\");\n//Additional context\naddContext(this, `Found the url ${loginPage.loginUrl}`);\naddContext(this, `Filled the username ${loginPage.invalidUsername}`);\naddContext(this, `Filled the password ${loginPage.invalidPassword}`);\naddContext(this, `Clicked on the button ${loginPage.loginButton}`);\naddContext(this, `Received error message ${errorText}`);",
              "err": {},
              "uuid": "b5e97ba9-c52e-4700-b947-9a44b4fb3d27",
              "parentUUID": "697ca0f1-34d0-40b5-9193-164102381ec5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3ab080b3-0a42-4ec6-b9ef-aaa0eb59262e",
            "b5e97ba9-c52e-4700-b947-9a44b4fb3d27"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2416,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "4d65f8d5-9e1e-49bf-b37e-145ed49c3a1c",
          "title": "SignUp Tests",
          "fullFile": "C:\\Users\\Krkljes\\Desktop\\Realworld App Praksa\\Realworld_app_praksa\\tests\\signup.test.js",
          "file": "\\tests\\signup.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"SignUp Tests\"",
              "fullTitle": "SignUp Tests \"before all\" hook in \"SignUp Tests\"",
              "timedOut": false,
              "duration": 1171,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Initialize the WebDriver and open the browser\ndriver = await new Builder().forBrowser('chrome').build();",
              "err": {},
              "uuid": "e2023841-46ef-456e-aa0a-06acbd0a7395",
              "parentUUID": "4d65f8d5-9e1e-49bf-b37e-145ed49c3a1c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"SignUp Tests\"",
              "fullTitle": "SignUp Tests \"after all\" hook in \"SignUp Tests\"",
              "timedOut": false,
              "duration": 32,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Quit the WebDriver after the test is complete\nawait driver.quit();",
              "err": {},
              "uuid": "9c09a681-4a8b-4f8e-8045-1ee5503e5975",
              "parentUUID": "4d65f8d5-9e1e-49bf-b37e-145ed49c3a1c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Valid signup test",
              "fullTitle": "SignUp Tests Valid signup test",
              "timedOut": false,
              "duration": 1499,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  \"Found the url http://localhost:3000/signup\",\n  \"Filled the first name Name1\",\n  \"Filled the last name Lastname1\",\n  \"Filled the username user1\",\n  \"Filled the password password1\",\n  \"Confirmed the password password1\",\n  \"Clicked on the button By(css selector, [data-test='signup-submit'])\",\n  \"The url matched http://localhost:3000/signin\"\n]",
              "code": "const signUpPage = new SignUpPage(driver);\n// Perform signup\nawait signUpPage.performSignUp();\n// Add assertions to verify successful signup\nconst currentUrl = await driver.getCurrentUrl();\nexpect(currentUrl).to.equal(signUpPage.loginUrl, \"Sign up was not successful\");\n//Additional context\naddContext(this, `Found the url ${signUpPage.signUpUrl}`);\naddContext(this, `Filled the first name ${signUpPage.validSignup.firstName}`);\naddContext(this, `Filled the last name ${signUpPage.validSignup.lastName}`);\naddContext(this, `Filled the username ${signUpPage.validSignup.username}`);\naddContext(this, `Filled the password ${signUpPage.validSignup.password}`);\naddContext(this, `Confirmed the password ${signUpPage.validSignup.confirmPassword}`);\naddContext(this, `Clicked on the button ${signUpPage.singUpBtn}`);\naddContext(this, `The url matched ${signUpPage.loginUrl}`);",
              "err": {},
              "uuid": "4007b9d4-a8bf-465c-b377-a2a5148a913b",
              "parentUUID": "4d65f8d5-9e1e-49bf-b37e-145ed49c3a1c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Invalid signup test",
              "fullTitle": "SignUp Tests Invalid signup test",
              "timedOut": false,
              "duration": 759,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  \"Found the url http://localhost:3000/signup\",\n  \"Filled the first name Name1\",\n  \"Filled the last name Lastname1\",\n  \"Filled the username user1\",\n  \"Filled the password password1\",\n  \"Confirmed the password password1\",\n  \"Confirmed the button By(css selector, [data-test='signup-submit']) is disabled\"\n]",
              "code": "const signUpPage = new SignUpPage(driver);\n// Try to signup with invalid credentials\nawait signUpPage.tryInvalidSignUp();\n// Add assertions to verify the signup failed\nconst signUpButton = await driver.findElement(signUpPage.singUpBtn);\nexpect(await signUpButton.getAttribute('disabled')).to.equal('true', 'Signup button is not disabled for invalid signup');\n\n//Additional context\naddContext(this, `Found the url ${signUpPage.signUpUrl}`);\naddContext(this, `Filled the first name ${signUpPage.validSignup.firstName}`);\naddContext(this, `Filled the last name ${signUpPage.validSignup.lastName}`);\naddContext(this, `Filled the username ${signUpPage.validSignup.username}`);\naddContext(this, `Filled the password ${signUpPage.validSignup.password}`);\naddContext(this, `Confirmed the password ${signUpPage.validSignup.confirmPassword}`);\naddContext(this, `Confirmed the button ${signUpPage.singUpBtn} is disabled`);",
              "err": {},
              "uuid": "90ee9d85-9a6c-451e-a74a-58137350d5c8",
              "parentUUID": "4d65f8d5-9e1e-49bf-b37e-145ed49c3a1c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4007b9d4-a8bf-465c-b377-a2a5148a913b",
            "90ee9d85-9a6c-451e-a74a-58137350d5c8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2258,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}